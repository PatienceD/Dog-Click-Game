{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","gameOver","_this","setState","console","log","this","forEach","card","count","alert","concat","find","o","i","sort","Math","random","_this2","components_Wrapper_Wrapper","components_Header_Header","map","components_Card_Card","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"m0EAWeA,SARF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MACxDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCD9BC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCS1CC,SATA,SAAAd,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACYJ,EAAMe,MADlB,eACqCf,EAAMgB,qBCsDpCC,6MAtDbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,KAGbI,SAAW,WAWT,OAVIC,EAAKH,MAAMH,MAAQM,EAAKH,MAAMF,WAChCK,EAAKC,SAAS,CAACN,UAAWK,EAAKH,MAAMH,OAAQ,WAC3CQ,QAAQC,IAAIC,KAAKP,MAAMF,aAG3BK,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEfC,MAAK,sBAAAC,OAAuBT,EAAKH,MAAMH,QACvCM,EAAKC,SAAS,CAACP,MAAO,KACf,KAGTT,WAAa,SAAAC,GACXc,EAAKH,MAAMC,MAAMY,KAAK,SAACC,EAAGC,GACxB,GAAID,EAAEzB,KAAOA,EAAG,CACd,GAAsB,IAAnBY,EAAMc,GAAGL,MAMV,OALAT,EAAMc,GAAGL,MAAQT,EAAMc,GAAGL,MAAQ,EAClCP,EAAKC,SAAS,CAACP,MAAOM,EAAKH,MAAMH,MAAQ,GAAI,WAC3CQ,QAAQC,IAAIC,KAAKP,MAAMH,SAEzBM,EAAKH,MAAMC,MAAMe,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAEPf,EAAKD,uFAMJ,IAAAiB,EAAAZ,KACP,OACExB,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,CAAQxB,MAAOU,KAAKP,MAAMH,MAAOC,UAAWS,KAAKP,MAAMF,WAAvD,cACCS,KAAKP,MAAMC,MAAMqB,IAAI,SAAAb,GAAI,OACxB1B,EAAAC,EAAAC,cAACsC,EAAD,CACAnC,WAAY+B,EAAK/B,WACjBC,GAAIoB,EAAKpB,GACTmC,IAAKf,EAAKpB,GACVI,MAAOgB,EAAKhB,kBA/CJgC,mBCKlBC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e98388b6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <div className=\"title\">{props.children}</div>\r\n        <div className=\"scores\">\r\n            Score: {props.score} Highscore: {props.highscore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React, {Component} from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore){\n      this.setState({highscore: this.state.score}, function(){\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id){\n        if(cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({score: this.state.score + 1}, function (){\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true;\n        }else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  render (){\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Click Game</Header>\n        {this.state.cards.map(card => (\n          <Card\n          clickCount={this.clickCount}\n          id={card.id}\n          key={card.id}\n          image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// import React, { Component } from \"react\";\n// import Card from \"./components/Card\";\n// import Wrapper from \"./components/Wrapper\";\n// import Header from \"./components/Header\";\n// import cards from \"./cards.json\";\n// import \"./App.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// class App extends Component {\n//     state = {\n//         cards,\n//         score: 0,\n//         highscore: 0\n//     };\n\n//     gameOver = () => {\n//         if (this.state.score > this.state.highscore){\n//             this.setState({highscore: this.state.score}, function(){\n//                 console.log(this.state.highscore);\n//             });\n//         }\n//         this.state.cards.forEach(card => {\n//             card.count = 0;\n//         });\n//         alert(`Game Over! \\nscore: ${this.state.score}`);\n//         this.setState({score: 0});\n//         return true;\n//     }\n\n//     clickCount = id => {\n//         this.state.cards.find((o, i) => {\n//             if (o.id === id){\n//                 if(cards[i].count === 0){\n//                     cards[i].count = cards[i].count + 1;\n//                     this.setState({score: this.state.score + 1}, function(){\n//                         console.log(this.state.score);\n//                     });\n//                     this.state.cards.sort(() => Math.random() - 0.5)\n//                     return true;\n//                 } else {\n//                     this.gameOver();\n//                 }\n//             }\n//         });\n//     }\n\n//     render() {\n//         return (\n//             <Wrapper>\n//                 <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n//                 {this.state.cards.map(card => (\n//                     <Card\n//                     clickCount={this.clickCount}\n//                     id={card.id}\n//                     key={card.id}\n//                     image={card.image}\n//                     />\n//                 ))}\n//             </Wrapper>\n//         );\n//     }\n// }\n\n// export default App;\n"],"sourceRoot":""}